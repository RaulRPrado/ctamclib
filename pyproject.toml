[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=65",
  "setuptools-scm[toml]>=6.2",
]

[project]
name = "gammasimtools"
description = "Tools for the Simulation System of the CTA Observatory"
readme = "README.rst"
license = { file = "LICENSE" }
authors = [
  { name = "simtools developers", email = "simtools-developer@desy.de" },
]
requires-python = ">=3.11"
classifiers = [
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Astronomy",
]
dynamic = [
  "version",
]
dependencies = [
  "astropy",
  "boost-histogram",
  "ctao-dpps-cosmic-ray-spectra",
  "ctapipe",
  "eventio",
  "jsonschema",
  "matplotlib",
  "numpy",
  "pymongo",
  "pyproj",
  "python-dotenv",
  "pyyaml",
  "scipy",
  "toml",
]
optional-dependencies."dev" = [
  "flake8",
  "pre-commit",
  "pylint",
  "ruff",
]
optional-dependencies."doc" = [
  "myst-parser",
  "numpydoc",
  "sphinx",
  "sphinx-book-theme",
]
optional-dependencies."tests" = [
  "pytest",
  "pytest-cov",
  "pytest-profiling",
  "pytest-random-order",
  "pytest-repeat",
  "pytest-xdist",
]
urls."bug tracker" = "https://github.com/gammasim/simtools/issues"
urls."documentation" = "https://gammasim.github.io/simtools/"
urls."repository" = "https://github.com/gammasim/simtools"
scripts.simtools-add-file-to-db = "simtools.applications.add_file_to_db:main"
scripts.simtools-add-value-from-json-to-db = "simtools.applications.add_value_from_json_to_db:main"
scripts.simtools-calculate-trigger-rate = "simtools.applications.calculate_trigger_rate:main"
scripts.simtools-compare-cumulative-psf = "simtools.applications.compare_cumulative_psf:main"
scripts.simtools-convert-all-model-parameters-from-simtel = "simtools.applications.convert_all_model_parameters_from_simtel:main"
scripts.simtools-convert-model-parameter-from-simtel = "simtools.applications.convert_model_parameter_from_simtel:main"
scripts.simtools-derive-mirror-rnda = "simtools.applications.derive_mirror_rnda:main"
scripts.simtools-generate-corsika-histograms = "simtools.applications.generate_corsika_histograms:main"
scripts.simtools-generate-default-metadata = "simtools.applications.generate_default_metadata:main"
scripts.simtools-generate-simtel-array-histograms = "simtools.applications.generate_simtel_array_histograms:main"
scripts.simtools-get-file-from-db = "simtools.applications.get_file_from_db:main"
scripts.simtools-get-parameter = "simtools.applications.get_parameter:main"
scripts.simtools-make-regular-arrays = "simtools.applications.make_regular_arrays:main"
scripts.simtools-plot-array-layout = "simtools.applications.plot_array_layout:main"
scripts.simtools-plot-simtel-histograms = "simtools.applications.plot_simtel_histograms:main"
scripts.simtools-print-array-elements = "simtools.applications.print_array_elements:main"
scripts.simtools-produce-array-config = "simtools.applications.produce_array_config:main"
scripts.simtools-production = "simtools.applications.production:main"
scripts.simtools-sim-showers-for-trigger-rates = "simtools.applications.sim_showers_for_trigger_rates:main"
scripts.simtools-simulate-light-emission = "simtools.applications.light_emission:main"
scripts.simtools-simulate-prod = "simtools.applications.simulate_prod:main"
scripts.simtools-submit-data-from-external = "simtools.applications.submit_data_from_external:main"
scripts.simtools-tune-psf = "simtools.applications.tune_psf:main"
scripts.simtools-validate-camera-efficiency = "simtools.applications.validate_camera_efficiency:main"
scripts.simtools-validate-camera-fov = "simtools.applications.validate_camera_fov:main"
scripts.simtools-validate-file-using-schema = "simtools.applications.validate_file_using_schema:main"
scripts.simtools-validate-optics = "simtools.applications.validate_optics:main"

[tool.setuptools]
packages = [
  "simtools",
]
include-package-data = true

[tool.setuptools_scm]
write_to = "simtools/_version.py"

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100
indent-width = 4
exclude = [
  "__init__.py",
  "pyproject.toml",
  "simtools/_version.py",
]

format.indent-style = "space"
format.quote-style = "double"
format.line-ending = "auto"
# no documentation linting for test files
format.skip-magic-trailing-comma = false
lint.extend-select = [
  "COM", # flake8-commas
  # "D",   # pydocstyle (temporary off: use in 2nd step)
  "G",   # logging
  "I",   # isort
  "ICN", # import name conventions
  "ISC", # implicit string concat rules
  "N",   # pep8 naming
  "NPY", # numpy
  "PT",  # pytest
  "UP",  # pyupgrade
]
# lint.pydocstyle.convention = "numpy"
lint.ignore = [
  "COM812", # incompatible with ruff format
  "D208",   # over-indentation (incompatible with sphinx)
  "D214",   # section-not-over-indented
  "D215",   # section-underline-not-over-indented
  "G004",   # Logging statement uses f-string
  "ISC001", # incompatible with ruff format
  "PT011",  # TODO - fix
  "PT012",  # TODO - fix
]
lint.per-file-ignores."**/tests/**" = [
  "D",
]
lint.per-file-ignores."**/tests_*.py" = [
  "D",
]

[tool.isort]
profile = "black"

[tool.pylint.main]
# Good variable names which should always be accepted, separated by a comma.
good-names = [
  "e",
  "i",
  "j",
  "k",
  "x",
  "y",
  "n",
  "f",
  "r",
  "ex",
  "db",
  "im",
  "sh",
  "ax",
  "ce",
  "xx",
  "yy",
  "zz",
  "C1",
  "C2",
  "C3",
  "C4",
  "C4x",
  "N1",
  "N2",
  "N3",
  "N4",
  "N4x",
  "lst",
  "mst",
  "sst",
  "sct",
  "hess",
  "magic",
  "veritas",
]
# Ignore files
ignore = [
  "__init__.py",
  "scm_version.py",
  "_version.py",
  "legend_handlers.py",
  "version.py",
]

# See discussion in issue 521
# Agreed to not have module docstring (missing-module-docstring)
# Pylint cannot handle overload (used in pyproj; unpacking-non-sequence)
disable = [
  "missing-module-docstring",
  "unpacking-non-sequence",
  "logging-format-interpolation",
  "fixme",
  "missing-function-docstring",
  "R0801",                         # duplications
  "logging-fstring-interpolation",
]
# see https://github.com/pylint-dev/pylint/issues/2289
generated-members = [
  "gist_heat_r",
]
# see https://stackoverflow.com/questions/49846940/incorrect-pylint-errors-on-astropy-in-vscode
ignored-classes = [
  "astropy.units",
]

# Maximum number of characters on a single line.
max-line-length = 100
# Maximum number of lines in a module. (default 1000)
max-module-lines = 2000
# Maximum number of branch for function / method body. (default=12)
max-branches = 25
# Maximum number of arguments for function / method (default=5).
max-args = 15
# Maximum number of locals for function / method body (default=15).
max-locals = 50
# Maximum number of attributes for a class (see R0902). (default=7)
max-attributes = 50
# Maximum number of statements in function / method body. (default=50)
max-statements = 80
# Maximum number of public methods for a class (see R0904). (default=20)
max-public-methods = 50

[tool.codespell]
ignore-words = ".codespell-ignores"

[tool.pytest.ini_options]
minversion = "6.0"
norecursedirs = [
  "build",
  "docs/_build",
  "simtools/applications",
]
addopts = "-v --cov=simtools --cov-report=xml --cov-report=term"
testpaths = "tests/unit_tests/"
# Ignore the warning about fontTools.misc.py23
filterwarnings = "ignore:The py23 module has been deprecated:DeprecationWarning"
