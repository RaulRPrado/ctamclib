#!/usr/bin/python3

'''
    Summary
    -------
    This application validates the optical model parameters through ray tracing simulations \
    of the whole telescope, assuming a point-like light source. The output includes PSF (D80), \
    effective mirror area and effective focal lenght as a function of the off-axis angle. \

    The telescope zenith angle and the source distance can be set by command line arguments.

    Examples of the plots generated by this applications are shown below. On the top, the D80 \
    vs off-axis is shown in cm (left) and deg (right). On the bottom, the effective mirror \
    area (left) and the effective focal length (right) vs off-axis angle are shown.

    .. _validate_optics_plot:
    .. image::  images/validate_optics_North-LST-1_d80_cm.png
      :width: 49 %
    .. image::  images/validate_optics_North-LST-1_d80_deg.png
      :width: 49 %

    .. image::  images/validate_optics_North-LST-1_eff_area.png
      :width: 49 %
    .. image::  images/validate_optics_North-LST-1_eff_flen.png
      :width: 49 %


    Command line arguments
    ----------------------
    tel_name (str, required)
        Telescope name (e.g. North-LST-1, South-SST-D, ...).
    model_version (str, optional)
        Model version (default=prod4).
    src_distance (float, optional)
        Source distance in km (default=10).
    zenith (float, optional)
        Zenith angle in deg (default=20).
    max_offset (float, optional)
        Maximum offset angle in deg (default=4).
    test (activation mode, optional)
        If activated, application will be faster by simulating fewer photons.
    verbosity (str, optional)
        Log level to print (default=INFO).

    Example
    -------
    LST-1 Prod5

    Runtime about 50 min.

    .. code-block:: console

        python applications/validate_optics.py --tel_name North-LST-1 -max_offset 5.0

    .. todo::

        * Change default model to default (after this feature is implemented in db_handler)
'''

import logging
import matplotlib.pyplot as plt
from copy import copy
from pathlib import Path
from math import sqrt
from collections import OrderedDict

import numpy as np
import astropy.units as u
from astropy.io import ascii
from astropy.table import Table

import simtools.io_handler as io
from simtools.ray_tracing import RayTracing
from simtools.model.telescope_model import TelescopeModel
from simtools import visualize

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


def getData(**kwargs):
    dType = {
        'names': ('Radius [cm]', 'Relative intensity'),
        'formats': ('f8', 'f8')
    }
    testDataFile = io.getTestDataFile('PSFcurve_data_v2.txt')
    data = np.loadtxt(testDataFile, dtype=dType, usecols=(0, 2))
    data['Radius [cm]'] *= 0.1
    data['Relative intensity'] /= np.max(np.abs(data['Relative intensity']))
    return data


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description=(
            'Calculate and plot the PSF and eff. mirror area as a function of off-axis angle '
            'of the telescope requested.'
        )
    )
    parser.add_argument(
        '-t',
        '--tel_name',
        help='Telescope name (e.g. North-MST-FlashCam-D, North-LST-1)',
        type=str,
        required=True
    )
    parser.add_argument(
        '-m',
        '--model_version',
        help='Model version (default=prod4)',
        type=str,
        default='prod4'
    )
    parser.add_argument(
        '--src_distance',
        help='Source distance in km (default=10)',
        type=float,
        default=10
    )
    parser.add_argument(
        '--zenith',
        help='Zenith angle in deg (default=20)',
        type=float,
        default=20
    )
    parser.add_argument(
        '--test',
        help='Test option will be faster by simulating fewer photons.',
        action='store_true'
    )
    parser.add_argument(
        '-v',
        '--verbosity',
        dest='logLevel',
        action='store',
        default='info',
        help='Log level to print (default is INFO)'
    )

    args = parser.parse_args()
    label = 'compare_cumulative_psf'

    logger = logging.getLogger(label)
    logger.setLevel(gen.getLogLevelFromUser(args.logLevel))

    # Output directory to save files related directly to this app
    outputDir = io.getApplicationOutputDirectory(cfg.get('outputLocation'), label)

    tel = TelescopeModel(
        telescopeName=args.tel_name,
        version=args.model_version,
        label=label,
        logger=logger.name
    )

    # New parameters defined by Konrad
    tel.changeParameters(
        mirror_reflection_random_angle='0.0075,0.15,0.035',
        mirror_align_random_horizontal='0.0040,28.,0.0,0.0',
        mirror_align_random_vertical='0.0040,28.,0.0,0.0'
    )

    ray = RayTracing(
        telescopeModel=tel,
        sourceDistance=args.src_distance * u.km,
        zenithAngle=args.zenith * u.deg,
        offAxisAngle=[0. * u.deg],
        logger=logger.name
    )

    ray.simulate(test=True, force=False)
    ray.analyze(force=False)

    # Plotting cumulative PSF
    im = ray.images()[0]

    print('d80 in cm = {}'.format(im.getPSF()))

    dataToPlot = OrderedDict()
    dataToPlot[r'sim$\_$telarray'] = im.getCumulativeData()
    dataToPlot['measured'] = getData()
    plt = visualize.plot1D(dataToPlot)

    simD80 = im.getPSF(0.8, 'cm') / 2
    plt.plot(
        [simD80, simD80],
        [0, 1.05],
        marker='None',
        color=visualize.getColors()[0],
        linestyle='--'
    )
    measD80 = 3.091 / 2
    plt.plot(
        [measD80, measD80],
        [0, 1.05],
        marker='None',
        color=visualize.getColors()[1],
        linestyle='--'
    )
    plt.gca().set_ylim(0, 1.05)

    plt.savefig('LST_CumulativePSF.pdf', format='pdf', bbox_inches='tight')
    plt.clf()

    dataToPlot = im.getImageData()
    visualize.plotHist2D(dataToPlot, bins=80)
    circle = plt.Circle((0, 0), im.getPSF(0.8) / 2, color='k', fill=False, lw=2, ls='--')
    plt.gca().add_artist(circle)

    plt.savefig('LST_photons.pdf', format='pdf', bbox_inches='tight')

    # plt.show()
