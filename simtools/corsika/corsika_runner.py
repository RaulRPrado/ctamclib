import logging
import os
from copy import copy
from pathlib import Path

from simtools import io_handler
from simtools.corsika.corsika_config import (
    CorsikaConfig,
    MissingRequiredInputInCorsikaConfigData,
)
from simtools.util import names
from simtools.util.general import collect_data_from_yaml_or_dict

__all__ = ["CorsikaRunner"]


class MissingRequiredEntryInCorsikaConfig(Exception):
    pass


class CorsikaRunner:
    """
    CorsikaRunner is responsible for running the CORSIKA, through the
    corsika_autoinputs program provided by the sim_telarray package. \
    It provides shell scripts to be run externally or by \
    the module simulator. Same instance can be used to \
    generate scripts for any given run number.

    It uses CorsikaConfig to manage the CORSIKA configuration. \
    User parameters must be given by the corsikaConfigData or \
    corsikaConfigFile arguments. An example of corsikaConfigData follows \
    below.

    .. code-block:: python

        corsikaConfigData = {
            'dataDirectory': .
            'primary': 'proton',
            'nshow': 10000,
            'nrun': 1,
            'zenith': 20 * u.deg,
            'viewcone': 5 * u.deg,
            'erange': [10 * u.GeV, 100 * u.TeV],
            'eslope': -2,
            'phi': 0 * u.deg,
            'cscat': [10, 1500 * u.m, 0]
        }

    The remaining CORSIKA parameters can be set as a yaml file, using the argument \
    corsikaParametersFile. When not given, corsikaParameters will be loaded \
    from data/corsika/corsika_parameters.yml.

    The CORSIKA output directory must be set by the dataDirectory entry. \
    The following directories will be created to store the output data, logs and input \
    file:

    {dataDirectory}/$site/$primary/data
    {dataDirectory}/$site/$primary/log
    {dataDirectory}/$site/$primary/inputs

    Attributes
    ----------
    site: str
        North or South.
    layoutName: str
        Name of the layout.
    label: str
        Instance label.
    corsikaConfig: CorsikaConfig
        CorsikaConfig object.

    Methods
    -------
    get_run_script(runNumber)
        Get the full path of the run script file for a given run number.
    get_log_file(runNumber)
        Get the full path of the run log file.
    get_corsika_log_file(runNumber)
        Get the full path of the CORSIKA log file.
    get_output_file(runNumber)
        Get the full path of the CORSIKA output file.
    """

    def __init__(
        self,
        site,
        layoutName,
        simtelSourcePath,
        label=None,
        keepSeeds=False,
        corsikaParametersFile=None,
        corsikaConfigData=None,
        corsikaConfigFile=None,
    ):
        """
        CorsikaRunner init.

        Parameters
        ----------
        site: str
            South or North.
        layoutName: str
            Name of the layout.
        label: str
            Instance label.
        keepSeeds: bool
            If True, seeds generated by CorsikaConfig, based on the \
            run number and the primary particle will be used. \
            If False, random seeds will be defined automatically by sim_telarray.
        simtelSourcePath: str or Path
            Location of source of the sim_telarray/CORSIKA package.
        corsikaConfigData: dict
            Dict with CORSIKA config data.
        corsikaConfigFile: str or Path
            Path to yaml file containing CORSIKA config data.
        corsikaParametersFile: str or Path
            Path to yaml file containing CORSIKA parameters.
        """

        self._logger = logging.getLogger(__name__)
        self._logger.debug("Init CorsikaRunner")

        self.label = label
        self.site = names.validate_site_name(site)
        self.layoutName = names.validate_layout_array_name(layoutName)

        self._keepSeeds = keepSeeds

        self._simtelSourcePath = simtelSourcePath
        self.io_handler = io_handler.IOHandler()
        self._outputDirectory = self.io_handler.get_output_directory(self.label, "corsika")
        self._logger.debug("Creating output dir {}, if needed,".format(self._outputDirectory))

        corsikaConfigData = collect_data_from_yaml_or_dict(corsikaConfigFile, corsikaConfigData)
        self._load_corsika_config_data(corsikaConfigData)

        self._load_corsika_data_directories()

    def _load_corsika_config_data(self, corsikaConfigData):
        """Reads corsikaConfigData, creates corsikaConfig and corsikaInputFile."""

        corsikaDataDirectoryFromConfig = corsikaConfigData.get("dataDirectory", None)
        if corsikaDataDirectoryFromConfig is None:
            # corsikaDataDirectory not given (or None).
            msg = (
                "dataDirectory not given in corsikaConfig "
                "- default output directory will be set."
            )
            self._logger.warning(msg)
            self._corsikaDataDirectory = self._outputDirectory
        else:
            # corsikaDataDirectory given and not None.
            self._corsikaDataDirectory = Path(corsikaDataDirectoryFromConfig)

        self._corsikaDataDirectory = self._corsikaDataDirectory.joinpath("corsika-data")

        # Copying corsikaConfigData and removing corsikaDataDirectory
        # (it does not go to CorsikaConfig)
        self._corsikaConfigData = copy(corsikaConfigData)
        self._corsikaConfigData.pop("dataDirectory", None)

        # Creating corsikaConfig - this will also validate the input given
        # in corsikaConfigData
        try:
            self.corsikaConfig = CorsikaConfig(
                site=self.site,
                label=self.label,
                layoutName=self.layoutName,
                corsikaConfigData=self._corsikaConfigData,
            )
            # CORSIKA input file used as template for all runs
            self._corsikaInputFile = self.corsikaConfig.get_input_file()
        except MissingRequiredInputInCorsikaConfigData:
            msg = "corsikaConfigData is missing required entries."
            self._logger.error(msg)
            raise

    def _load_corsika_data_directories(self):
        """Create CORSIKA directories for data, log and input."""
        corsikaBaseDir = self._corsikaDataDirectory.joinpath(self.site)
        corsikaBaseDir = corsikaBaseDir.joinpath(self.corsikaConfig.primary)
        corsikaBaseDir = corsikaBaseDir.absolute()

        self._corsikaDataDir = corsikaBaseDir.joinpath("data")
        self._corsikaDataDir.mkdir(parents=True, exist_ok=True)
        self._corsikaInputDir = corsikaBaseDir.joinpath("input")
        self._corsikaInputDir.mkdir(parents=True, exist_ok=True)
        self._corsikaLogDir = corsikaBaseDir.joinpath("log")
        self._corsikaLogDir.mkdir(parents=True, exist_ok=True)

    def get_run_script(self, **kwargs):
        """
        Get the full path of the run script file for a given run number.

        Parameters
        ----------
        runNumber: int
            Run number.
        extraCommands: str
            Additional commands for running simulations.

        Returns
        -------
        Path:
            Full path of the run script file.
        """
        kwargs = {
            "runNumber": None,
            "extraCommands": None,
            **kwargs,
        }
        runNumber = self._validate_run_number(kwargs["runNumber"])

        # Setting script file name
        scriptFileName = names.corsika_run_script_file_name(
            arrayName=self.layoutName,
            site=self.site,
            primary=self.corsikaConfig.primary,
            run=runNumber,
            label=self.label,
        )
        scriptFileDir = self._outputDirectory.joinpath("scripts")
        scriptFileDir.mkdir(parents=True, exist_ok=True)
        scriptFilePath = scriptFileDir.joinpath(scriptFileName)

        # CORSIKA input file for a specific run, created by the preprocessor pfp
        corsikaInputTmpName = self.corsikaConfig.get_input_file_name_for_run(runNumber)
        corsikaInputTmpFile = self._corsikaInputDir.joinpath(corsikaInputTmpName)

        pfpCommand = self._get_pfp_command(runNumber, corsikaInputTmpFile)
        autoinputsCommand = self._get_autoinputs_command(runNumber, corsikaInputTmpFile)

        extraCommands = kwargs["extraCommands"]
        self._logger.debug("Extra commands to be added to the run script {}".format(extraCommands))

        with open(scriptFilePath, "w") as file:
            # shebang
            file.write("#!/usr/bin/bash\n")

            # Setting SECONDS variable to measure runtime
            file.write("\nSECONDS=0\n")

            if extraCommands is not None:
                file.write("\n# Writing extras\n")
                file.write("{}\n".format(extraCommands))
                file.write("# End of extras\n\n")

            file.write("export CORSIKA_DATA={}\n".format(self._corsikaDataDir))
            file.write("\n# Creating CORSIKA_DATA\n")
            file.write("mkdir -p {}\n".format(self._corsikaDataDir))
            file.write("cd {} || exit 2\n".format(self._corsikaDataDir))
            file.write("\n# Running pfp\n")
            file.write(pfpCommand)
            file.write("\n# Running corsika_autoinputs\n")
            file.write(autoinputsCommand)

            # Printing out runtime
            file.write('\necho "RUNTIME: $SECONDS"\n')

        # Changing permissions
        os.system("chmod ug+x {}".format(scriptFilePath))

        return scriptFilePath

    def _get_pfp_command(self, runNumber, inputTmpFile):
        """Get pfp pre-processor command."""
        cmd = self._simtelSourcePath.joinpath("sim_telarray/bin/pfp")
        cmd = str(cmd) + " -V -DWITHOUT_MULTIPIPE - < {}".format(self._corsikaInputFile)
        cmd += " > {}\n".format(inputTmpFile)
        return cmd

    def _get_autoinputs_command(self, runNumber, inputTmpFile):
        """Get autoinputs command."""
        corsikaBinPath = self._simtelSourcePath.joinpath("corsika-run/corsika")

        logFile = self.get_log_file(runNumber)

        cmd = self._simtelSourcePath.joinpath("sim_telarray/bin/corsika_autoinputs")
        cmd = str(cmd) + " --run {}".format(corsikaBinPath)
        cmd += " -R {}".format(runNumber)
        cmd += " -p {}".format(self._corsikaDataDir)
        if self._keepSeeds:
            cmd += " --keep-seeds"
        cmd += " {} > {} 2>&1".format(inputTmpFile, logFile)
        cmd += " || exit 1\n"
        return cmd

    def has_run_log_file(self, runNumber=None):
        """
        Checks that the run log file for this run number
        is a valid file on disk

        Parameters
        ----------
        runNumber: int
            Run number.

        """

        runNumber = self._validate_run_number(runNumber)
        runLogFile = self.get_log_file(runNumber=runNumber)
        return Path(runLogFile).is_file()

    def has_sub_log_file(self, runNumber=None, mode="out"):
        """
        Checks that the sub run log file for this run number
        is a valid file on disk

        Parameters
        ----------
        runNumber: int
            Run number.

        """

        runNumber = self._validate_run_number(runNumber)
        runSubFile = self.get_sub_log_file(runNumber=runNumber, mode=mode)
        return Path(runSubFile).is_file()

    def get_resources(self, runNumber=None):
        """
        Read run time of job from last line of submission log file.

        Parameters
        ----------
        runNumber: int
            Run number.

        Returns
        -------
        dict
            run time and number of simulated events

        """

        runNumber = self._validate_run_number(runNumber)
        subLogFile = self.get_sub_log_file(runNumber=runNumber, mode="out")

        self._logger.debug("Reading resources from {}".format(subLogFile))

        _resources = {}

        _resources["runtime"] = None
        with open(subLogFile, "r") as file:
            for line in reversed(list(file)):
                if "RUNTIME" in line:
                    _resources["runtime"] = int(line.split()[1])
                    break

        if _resources["runtime"] is None:
            self._logger.debug("RUNTIME was not found in run log file")

        # Calculating number of events
        _resources["nEvents"] = int(self.corsikaConfig.get_user_parameter("NSHOW"))

        return _resources

    def get_log_file(self, runNumber=None):
        """
        Get the full path of the run log file.

        Parameters
        ----------
        runNumber: int
            Run number.

        Raises
        ------
        ValueError
            If runNumber is not valid (not an unsigned int).

        Returns
        -------
        Path:
            Full path of the run log file.
        """
        runNumber = self._validate_run_number(runNumber)
        logFileName = names.corsika_run_log_file_name(
            site=self.site,
            run=runNumber,
            primary=self.corsikaConfig.primary,
            arrayName=self.layoutName,
            label=self.label,
        )
        return self._corsikaLogDir.joinpath(logFileName)

    def get_sub_log_file(self, runNumber=None, mode="out"):
        """
        Get the full path of the submission log file.

        Parameters
        ----------
        runNumber: int
            Run number.
        mode: str
            out or err

        Raises
        ------
        ValueError
            If runNumber is not valid (not an unsigned int).

        Returns
        -------
        Path:
            Full path of the run log file.
        """
        runNumber = self._validate_run_number(runNumber)
        logFileName = names.corsika_sub_log_file_name(
            site=self.site,
            run=runNumber,
            primary=self.corsikaConfig.primary,
            arrayName=self.layoutName,
            label=self.label,
            mode=mode,
        )

        subLogFileDir = self._outputDirectory.joinpath("logs")
        subLogFileDir.mkdir(parents=True, exist_ok=True)
        return subLogFileDir.joinpath(logFileName)

    def get_corsika_log_file(self, runNumber=None):
        """
        Get the full path of the CORSIKA log file.

        Parameters
        ----------
        runNumber: int
            Run number.

        Raises
        ------
        ValueError
            If runNumber is not valid (not an unsigned int).

        Returns
        -------
        Path:
            Full path of the CORSIKA log file.
        """
        runNumber = self._validate_run_number(runNumber)
        runDir = self._get_run_directory(runNumber)
        return self._corsikaDataDir.joinpath(runDir).joinpath("run{}.log".format(runNumber))

    def get_output_file(self, runNumber=None):
        """
        Get the full path of the CORSIKA output file.

        Parameters
        ----------
        runNumber: int
            Run number.

        Raises
        ------
        ValueError
            If runNumber is not valid (not an unsigned int).

        Returns
        -------
        Path:
            Full path of the CORSIKA output file.
        """
        runNumber = self._validate_run_number(runNumber)
        corsikaFileName = self.corsikaConfig.get_output_file_name(runNumber)
        runDir = self._get_run_directory(runNumber)
        return self._corsikaDataDir.joinpath(runDir).joinpath(corsikaFileName)

    @staticmethod
    def _get_run_directory(runNumber):
        """Get run directory created by sim_telarray (ex. run000014)."""
        nn = str(runNumber)
        return "run" + nn.zfill(6)

    def _validate_run_number(self, runNumber):
        """
        Returns the run number from corsikaConfig in case runNumber is None,
        Raise ValueError if runNumber is not valid (< 1) or returns runNumber if
        it is a valid value.
        """
        if runNumber is None:
            return self.corsikaConfig.get_user_parameter("RUNNR")
        elif not float(runNumber).is_integer() or runNumber < 1:
            msg = "Invalid type of run number ({}) - it must be an uint.".format(runNumber)
            self._logger.error(msg)
            raise ValueError(msg)
        else:
            return runNumber
