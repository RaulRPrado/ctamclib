import logging
import os
from copy import copy
from pathlib import Path

from simtools import io_handler
from simtools.corsika.corsika_config import (
    CorsikaConfig,
    MissingRequiredInputInCorsikaConfigData,
)
from simtools.util import names
from simtools.util.general import collect_data_from_yaml_or_dict

__all__ = ["CorsikaRunner"]


class MissingRequiredEntryInCorsikaConfig(Exception):
    pass


class CorsikaRunner:
    """
    CorsikaRunner is responsible for running the CORSIKA, through the
    corsika_autoinputs program provided by the sim_telarray package. \
    It provides shell scripts to be run externally or by \
    the module simulator. Same instance can be used to \
    generate scripts for any given run number.

    It uses CorsikaConfig to manage the CORSIKA configuration. \
    User parameters must be given by the corsika_config_data or \
    corsika_config_file arguments. An example of corsika_config_data follows \
    below.

    .. code-block:: python

        corsika_config_data = {
            'data_directory': .
            'primary': 'proton',
            'nshow': 10000,
            'nrun': 1,
            'zenith': 20 * u.deg,
            'viewcone': 5 * u.deg,
            'erange': [10 * u.GeV, 100 * u.TeV],
            'eslope': -2,
            'phi': 0 * u.deg,
            'cscat': [10, 1500 * u.m, 0]
        }

    The remaining CORSIKA parameters can be set as a yaml file, using the argument \
    corsika_parameters_file. When not given, corsika_parameters will be loaded \
    from data/corsika/corsika_parameters.yml.

    The CORSIKA output directory must be set by the data_directory entry. \
    The following directories will be created to store the output data, logs and input \
    file:

    {data_directory}/$site/$primary/data
    {data_directory}/$site/$primary/log
    {data_directory}/$site/$primary/inputs

    Attributes
    ----------
    site: str
        North or South.
    layout_name: str
        Name of the layout.
    label: str
        Instance label.
    corsika_config: Corsika_config
        Corsika_config object.

    Methods
    -------
    get_run_script(run_number)
        Get the full path of the run script file for a given run number.
    get_info_for_file_name()
        Get a dirctionary with the info necessary for building the CORSIKA runner file names.
    get_file_name()
        Get a CORSIKA style file name for various file types.
    """

    def __init__(
        self,
        site,
        layout_name,
        simtel_source_path,
        label=None,
        keep_seeds=False,
        corsika_parameters_file=None,
        corsika_config_data=None,
        corsika_config_file=None,
    ):
        """
        CorsikaRunner init.

        Parameters
        ----------
        site: str
            South or North.
        layout_name: str
            Name of the layout.
        label: str
            Instance label.
        keep_seeds: bool
            If True, seeds generated by CorsikaConfig, based on the \
            run number and the primary particle will be used. \
            If False, random seeds will be defined automatically by sim_telarray.
        simtel_source_path: str or Path
            Location of source of the sim_telarray/CORSIKA package.
        corsika_config_data: dict
            Dict with CORSIKA config data.
        corsika_config_file: str or Path
            Path to yaml file containing CORSIKA config data.
        corsika_parameters_file: str or Path
            Path to yaml file containing CORSIKA parameters.
        """

        self._logger = logging.getLogger(__name__)
        self._logger.debug("Init CorsikaRunner")

        self.label = label
        self.site = names.validate_site_name(site)
        self.layout_name = names.validate_layout_array_name(layout_name)

        self._keep_seeds = keep_seeds

        self._simtel_source_path = simtel_source_path
        self.io_handler = io_handler.IOHandler()
        self._output_directory = self.io_handler.get_output_directory(self.label, "corsika")
        self._logger.debug("Creating output dir {}, if needed,".format(self._output_directory))

        corsika_config_data = collect_data_from_yaml_or_dict(
            corsika_config_file, corsika_config_data
        )
        self._load_corsika_config_data(corsika_config_data)

        self._load_corsika_data_directories()

    def _load_corsika_config_data(self, corsika_config_data):
        """Reads corsika_config_data, creates corsika_config and corsika_input_file."""

        corsika_data_directory_from_config = corsika_config_data.get("data_directory", None)
        if corsika_data_directory_from_config is None:
            # corsika_data_directory not given (or None).
            msg = (
                "data_directory not given in corsika_config "
                "- default output directory will be set."
            )
            self._logger.warning(msg)
            self._corsika_data_directory = self._output_directory
        else:
            # corsika_data_directory given and not None.
            self._corsika_data_directory = Path(corsika_data_directory_from_config)

        self._corsika_data_directory = self._corsika_data_directory.joinpath("corsika-data")

        # Copying corsika_config_data and removing corsika_data_directory
        # (it does not go to CorsikaConfig)
        self._corsika_config_data = copy(corsika_config_data)
        self._corsika_config_data.pop("data_directory", None)

        # Creating corsika_config - this will also validate the input given
        # in corsika_config_data
        try:
            self.corsika_config = CorsikaConfig(
                site=self.site,
                label=self.label,
                layout_name=self.layout_name,
                corsika_config_data=self._corsika_config_data,
            )
            # CORSIKA input file used as template for all runs
            self._corsika_input_file = self.corsika_config.get_input_file()
        except MissingRequiredInputInCorsikaConfigData:
            msg = "corsika_config_data is missing required entries."
            self._logger.error(msg)
            raise

    def _load_corsika_data_directories(self):
        """Create CORSIKA directories for data, log and input."""
        corsika_base_dir = self._corsika_data_directory.joinpath(self.site)
        corsika_base_dir = corsika_base_dir.joinpath(self.corsika_config.primary)
        corsika_base_dir = corsika_base_dir.absolute()

        self._corsika_data_dir = corsika_base_dir.joinpath("data")
        self._corsika_data_dir.mkdir(parents=True, exist_ok=True)
        self._corsika_input_dir = corsika_base_dir.joinpath("input")
        self._corsika_input_dir.mkdir(parents=True, exist_ok=True)
        self._corsika_log_dir = corsika_base_dir.joinpath("log")
        self._corsika_log_dir.mkdir(parents=True, exist_ok=True)

    def get_run_script(self, **kwargs):
        """
        Get the full path of the run script file for a given run number.

        Parameters
        ----------
        run_number: int
            Run number.
        extra_commands: str
            Additional commands for running simulations.

        Returns
        -------
        Path:
            Full path of the run script file.
        """
        kwargs = {
            "run_number": None,
            "extra_commands": None,
            **kwargs,
        }
        run_number = self._validate_run_number(kwargs["run_number"])

        script_file_path = self.get_file_name(
            file_type="script", **self.get_info_for_file_name(run_number)
        )

        # CORSIKA input file for a specific run, created by the preprocessor pfp
        corsika_input_tmp_name = self.corsika_config.get_file_name(
            file_type="config_tmp", run_number=run_number
        )
        corsika_input_tmp_file = self._corsika_input_dir.joinpath(corsika_input_tmp_name)

        pfp_command = self._get_pfp_command(run_number, corsika_input_tmp_file)
        autoinputs_command = self._get_autoinputs_command(run_number, corsika_input_tmp_file)

        extra_commands = kwargs["extra_commands"]
        self._logger.debug("Extra commands to be added to the run script {}".format(extra_commands))

        with open(script_file_path, "w") as file:
            # shebang
            file.write("#!/usr/bin/bash\n")

            # Setting SECONDS variable to measure runtime
            file.write("\nSECONDS=0\n")

            if extra_commands is not None:
                file.write("\n# Writing extras\n")
                file.write("{}\n".format(extra_commands))
                file.write("# End of extras\n\n")

            file.write("export CORSIKA_DATA={}\n".format(self._corsika_data_dir))
            file.write("\n# Creating CORSIKA_DATA\n")
            file.write("mkdir -p {}\n".format(self._corsika_data_dir))
            file.write("cd {} || exit 2\n".format(self._corsika_data_dir))
            file.write("\n# Running pfp\n")
            file.write(pfp_command)
            file.write("\n# Running corsika_autoinputs\n")
            file.write(autoinputs_command)

            # Printing out runtime
            file.write('\necho "RUNTIME: $SECONDS"\n')

        # Changing permissions
        os.system("chmod ug+x {}".format(script_file_path))

        return script_file_path

    def _get_pfp_command(self, run_number, input_tmp_file):
        """Get pfp pre-processor command."""
        cmd = self._simtel_source_path.joinpath("sim_telarray/bin/pfp")
        cmd = str(cmd) + " -V -DWITHOUT_MULTIPIPE - < {}".format(self._corsika_input_file)
        cmd += " > {}\n".format(input_tmp_file)
        return cmd

    def _get_autoinputs_command(self, run_number, input_tmp_file):
        """Get autoinputs command."""
        corsika_bin_path = self._simtel_source_path.joinpath("corsika-run/corsika")

        log_file = self.get_file_name(file_type="log", **self.get_info_for_file_name(run_number))

        cmd = self._simtel_source_path.joinpath("sim_telarray/bin/corsika_autoinputs")
        cmd = str(cmd) + " --run {}".format(corsika_bin_path)
        cmd += " -R {}".format(run_number)
        cmd += " -p {}".format(self._corsika_data_dir)
        if self._keep_seeds:
            cmd += " --keep-seeds"
        cmd += " {} > {} 2>&1".format(input_tmp_file, log_file)
        cmd += " || exit 1\n"
        return cmd

    def get_info_for_file_name(self, run_number):
        """
        Get a dirctionary with the info necessary for building the CORSIKA runner file names.

        Returns
        -------
        dict
            Dictionary with the keys necessary for building the CORSIKA runner file names.
        """
        run_number = self._validate_run_number(run_number)
        return {
            "run": run_number,
            "primary": self.corsika_config.primary,
            "array_name": self.layout_name,
            "site": self.site,
            "label": self.label,
        }

    def get_file_name(self, file_type, **kwargs):
        """
        Get a CORSIKA style file name for various file types.

        Parameters
        ----------
        file_type: str
            The type of file it is (determines the file suffix).
            Choices are log, histogram, output or sub_log.
        kwargs: dict
            The dictionary must include the following parameters (unless listed as optional):
                run: int
                    Run number.
                primary: str
                    Primary particle (e.g gamma, proton etc).
                site: str
                    Paranal or LaPalma.
                array_name: str
                    Array name.
                label: str
                    Instance label (optional).
                mode: str
                    out or err (optional, relevant only for sub_log).

        Returns
        -------
        str
            File name with full path.

        Raises
        ------
        ValueError
            If file_type is unknown.
        """

        file_label = (
            f"_{kwargs['label']}" if "label" in kwargs and kwargs["label"] is not None else ""
        )
        file_name = (
            f"corsika_run{kwargs['run']}_{kwargs['array_name']}_"
            f"{kwargs['site']}_{kwargs['primary']}{file_label}"
        )

        if file_type == "log":
            return self._corsika_log_dir.joinpath(f"log_{file_name}.log")
        elif file_type == "corsike_log":
            run_dir = self._get_run_directory(kwargs["run"])
            return self._corsika_data_dir.joinpath(run_dir).joinpath(
                "run{}.log".format(kwargs["run"])
            )
        elif file_type == "script":
            script_file_dir = self._output_directory.joinpath("scripts")
            script_file_dir.mkdir(parents=True, exist_ok=True)
            return script_file_dir.joinpath(f"{file_name}.sh")
        elif file_type == "output":
            zenith = self.corsika_config.get_user_parameter("THETAP")[0]
            azimuth = self.corsika_config.get_user_parameter("AZM")[0]
            file_name = (
                f"corsika_run{kwargs['run']}_{kwargs['primary']}_"
                f"za{int(zenith):d}deg_azm{int(azimuth):d}deg_"
                f"{kwargs['site']}_{kwargs['array_name']}{file_label}"
            )
            run_dir = self._get_run_directory(kwargs["run"])
            return self._corsika_data_dir.joinpath(run_dir).joinpath(f"{file_name}.zst")
        elif file_type == "sub_log":
            suffix = ".log"
            if "mode" in kwargs:
                suffix = f".{kwargs['mode']}"
            sub_log_file_dir = self._output_directory.joinpath("logs")
            sub_log_file_dir.mkdir(parents=True, exist_ok=True)
            return sub_log_file_dir.joinpath(f"log_sub_{file_name}{suffix}")
        else:
            raise ValueError(f"The requested file type ({file_type}) is unknown")

    def has_run_log_file(self, run_number=None):
        """
        Checks that the run log file for this run number
        is a valid file on disk

        Parameters
        ----------
        run_number: int
            Run number.

        """

        return Path(
            self.get_file_name(file_type="log", **self.get_info_for_file_name(run_number))
        ).is_file()

    def has_sub_log_file(self, run_number=None, mode="out"):
        """
        Checks that the sub run log file for this run number
        is a valid file on disk

        Parameters
        ----------
        run_number: int
            Run number.

        """

        return Path(
            self.get_file_name(
                file_type="sub_log", **self.get_info_for_file_name(run_number), mode=mode
            )
        ).is_file()

    def get_resources(self, run_number=None):
        """
        Read run time of job from last line of submission log file.

        Parameters
        ----------
        run_number: int
            Run number.

        Returns
        -------
        dict
            run time and number of simulated events

        """

        sub_log_file = self.get_file_name(
            file_type="sub_log", **self.get_info_for_file_name(run_number), mode="out"
        )

        self._logger.debug("Reading resources from {}".format(sub_log_file))

        _resources = {}

        _resources["runtime"] = None
        with open(sub_log_file, "r") as file:
            for line in reversed(list(file)):
                if "RUNTIME" in line:
                    _resources["runtime"] = int(line.split()[1])
                    break

        if _resources["runtime"] is None:
            self._logger.debug("RUNTIME was not found in run log file")

        # Calculating number of events
        _resources["n_events"] = int(self.corsika_config.get_user_parameter("NSHOW"))

        return _resources

    @staticmethod
    def _get_run_directory(run_number):
        """Get run directory created by sim_telarray (ex. run000014)."""
        nn = str(run_number)
        return "run" + nn.zfill(6)

    def _validate_run_number(self, run_number):
        """
        Returns the run number from corsika_config in case run_number is None,
        Raise ValueError if run_number is not valid (< 1) or returns run_number if
        it is a valid value.
        """
        if run_number is None:
            return self.corsika_config.get_user_parameter("RUNNR")
        elif not float(run_number).is_integer() or run_number < 1:
            msg = "Invalid type of run number ({}) - it must be an uint.".format(run_number)
            self._logger.error(msg)
            raise ValueError(msg)
        else:
            return run_number
