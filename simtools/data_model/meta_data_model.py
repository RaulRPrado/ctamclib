"""
Definition of metadata model for input to and output of gammasim-tools.
Follows CTA top-level data model definition.

Metadata is broken into the hierarchical categories in this module.

Metadata fields require the three following fields to be defined:
    - type: data type (str)
    - required: boolean if this field is required as input(!)
    - default: default value

Used for
- data products submitted to SimPipe ('input')
- data products generated by SimPipe ('output')

"""


class InvalidSchemaList(Exception):
    """
    Exception raised for requests of unknown schema lists
    """


def category_reference():
    """
    Metadata field REFERENCE.

    Refers to the CTA Top-Level Data Model (document CTA-SPE-OSO-000000-0001.)

    """
    return {"VERSION": {"type": "str", "required": True, "default": "1.0.0"}}


def category_contact():
    """
    Metadata field CONTACT.

    Organisation and person submitting or processing these data.

    """
    return {
        "ORGANIZATION": {"type": "str", "required": True, "default": None},
        "NAME": {"type": "str", "required": True, "default": None},
        "EMAIL": {"type": "email", "required": True, "default": None},
    }


def category_product():
    """
    Metadata field PRODUCT.

    Describes the data product, especially its validity and associations.

    """
    return {
        "DESCRIPTION": {"type": "str", "required": True, "default": None},
        "CREATION_TIME": {"type": "datetime", "required": True, "default": None},
        "ID": {"type": "str", "required": False, "default": None},
        "DATA": {
            "CATEGORY": {"type": "str", "required": False, "default": None},
            "LEVEL": {"type": "str", "required": False, "default": None},
            "TYPE": {"type": "str", "required": False, "default": None},
            "MODEL": {
                "NAME": {"type": "str", "required": False, "default": None},
                "VERSION": {"type": "str", "required": False, "default": None},
                "URL": {"type": "str", "required": False, "default": None},
            },
        },
        "FORMAT": {"type": "str", "required": False, "default": "ecsv"},
        "VALID": {
            "START": {"type": "datetime", "required": False, "default": None},
            "END": {"type": "datetime", "required": False, "default": None},
        },
        "ASSOCIATION": {"type": "instrumentlist", "required": True, "default": []},
    }


def category_process():
    """
    Metadata field PROCESS.

    Description of the process which generated these data.

    """
    return {
        "TYPE": {"type": "str", "required": True, "default": None},
        "SUBTYPE": {"type": "str", "required": False, "default": None},
        "ID": {"type": "str", "required": True, "default": None},
    }


def category_context():
    """
    Metadata field CONTEXT.

    Describes list of context documents.

    """
    return {"DOCUMENT": {"type": "documentlist", "required": False, "default": None}}


def category_document():
    """
    Metadata field DOCUMENT.

    Described a

    """

    return {
        "TYPE": {"type": "str", "required": False, "default": None},
        "ID": {"type": "str", "required": False, "default": None},
        "LINK": {"type": "str", "required": False, "default": None},
    }


def category_instrument():
    """
    Metadata field INSTRUMENT.

    Describes the instrument used to obtain these data or the instrument these data is applied for.

    """
    return {
        "SITE": {"type": "str", "required": True, "default": None},
        "CLASS": {"type": "str", "required": True, "default": None},
        "TYPE": {"type": "str", "required": True, "default": None},
        "SUBTYPE": {"type": "str", "required": False, "default": None},
        "ID": {"type": "str", "required": True, "default": None},
    }


def category_activity():
    """
    Metadata field ACTIVITY.

    Describes the software used to process these data.

    """
    return {
        "NAME": {"type": "str", "required": True, "default": None},
        "TYPE": {"type": "str", "required": True, "default": "software"},
        "ID": {"type": "str", "required": True, "default": None},
        "START": {"type": "datetime", "required": False, "default": None},
        "SOFTWARE": {
            "NAME": {"type": "str", "required": True, "default": None},
            "VERSION": {"type": "str", "required": True, "default": None},
        },
    }


def top_level_reference_schema():
    """
    Reference schema following the CTA Top-Level Data Model.

    This metadata schema is used for gammasim-tools data products.

    Returns
    -------
    dict with reference schema


    """

    _ref_schema = {
        "CTA": {
            "REFERENCE": category_reference(),
            "CONTACT": category_contact(),
            "PRODUCT": category_product(),
            "INSTRUMENT": category_instrument(),
            "PROCESS": category_process(),
            "ACTIVITY": category_activity(),
            "CONTEXT": {
                "SIM": {
                    "ASSOCIATION": [
                        category_instrument(),
                    ],
                    "DOCUMENT": [
                        category_document(),
                    ],
                },
            },
        }
    }
    _ref_schema = _metadata_dict_with_defaults(_ref_schema)
    return _remove_empty_lists(_ref_schema)


def metadata_input_reference_schema():
    """
    Reference data model scheme for input metadata.
    Describes metadata provided for input to gammasim-tools applications.

    Returns
    -------
    dict with input reference schema

    """

    return {
        "REFERENCE": category_reference(),
        "CONTACT": category_contact(),
        "PRODUCT": category_product(),
        "INSTRUMENT": category_instrument(),
        "PROCESS": category_process(),
        "CONTEXT": category_context(),
    }


def metadata_input_reference_document_list(schema_list):
    """
    Reference model data for input metata data of type DOCUMENT.

    Returns
    -------
    dict with input reference schema for DOCUMENT

    """
    if schema_list.lower() == "instrumentlist":
        return category_instrument()
    if schema_list.lower() == "documentlist":
        return category_document()

    msg = f"Invalid schema list: {schema_list}"
    raise InvalidSchemaList(msg)


def workflow_configuration_schema():
    """
    Reference schmema for gammasim-tools workflow configuration.

    Returns
    -------
    dict with workflow configuration

    """

    return {
        "reference": {"version": "0.1.0"},
        "activity": {
            "name": None,
            "id": None,
            "description": None,
        },
        "datamodel": {
            "inputschema": None,
        },
        "product": {
            "description": None,
            "format": None,
            "filename": None,
        },
        "configuration": {
            "log_level": "INFO",
            "test": False,
        },
    }


def _metadata_dict_with_defaults(meta_dict):
    """
    Prepare dictionary with default values filled and removal of all type/required/default dicts.

    Parameters
    ----------
    dict
        Metadata dictionary

    Returns
    -------
    dict
        Metadata dictionary with default values filled

    """

    for key, value in meta_dict.items():
        if isinstance(value, dict):
            if value.keys() >= {"type", "required", "default"}:
                meta_dict[key] = value["default"]
            else:
                _metadata_dict_with_defaults(value)
        elif isinstance(value, list):
            for list_entry in value:
                _metadata_dict_with_defaults(list_entry)
        else:
            msg = f"Invalid schema list with missing type, required, or default fields: {key}"
            raise InvalidSchemaList(msg)
    return meta_dict


def _remove_empty_lists(meta_dict):
    """
    Remove entries of type list with length zero, as those are not used for output.

    """
    _entries_to_pop = []
    for key, value in meta_dict.items():
        if isinstance(value, dict):
            _remove_empty_lists(value)
        elif isinstance(value, list) and len(value) == 0:
            _entries_to_pop.append(key)
    for key in _entries_to_pop:
        meta_dict.pop(key)

    return meta_dict
